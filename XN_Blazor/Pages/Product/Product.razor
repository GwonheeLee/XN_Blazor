@page "/product"
@using DataShared

<br />
<MudPaper Class="pa-2 ma-1" Outlined="true">
    <MudTable Items="@Elements" T="@ProductTestData" OnRowClick="@ElementClick" Hover=true Bordered=true  Filter="new Func<ProductTestData,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">상품목록</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-2"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>코드</MudTh>
            <MudTh>상품명</MudTh>
            <MudTh>타입</MudTh>
            <MudTh>단위</MudTh>
            <MudTh>현 재고량</MudTh>
            <MudTh>안전 재고량</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Code">@context.Code</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="nQty">@context.nQty</MudTd>
            <MudTd DataLabel="sQty">@context.sQty</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

<MudItem xs="12" sm="6" md="4">
        <MudDatePicker Label="Date Format" @bind-Date="@_startDate" 
        HelperText="For custom cultures" DateFormat="yyyy/MM/dd" MaxDate="@DateTime.Now"/>
</MudItem>

<MudItem xs="12" sm="6" md="4">
        <MudDatePicker Label="Date Format" DateChanged="@SelectDateRange"  
        HelperText="For custom cultures" DateFormat="yyyy/MM/dd" MaxDate="@MaxDate" MinDate="@_startDate.Value.AddDays(1)"/>
</MudItem>


<div class="d-block pa-2">
    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@_chartX" Width="100%" Height="350px"></MudChart>
</div>


<div style="height:1000px"></div>

@code {

    //ProductList
    string searchString1 = "";
    ProductTestData selectedItem1 = null;
    List<ProductTestData> Elements = new List<ProductTestData>();
    ProductTestData _selectedEl;

    //ShowToggle
    bool _showToggle;

    //Date
    DateTime? _startDate;
    DateTime? _endDate;
    DateTime MaxDate
    {
        get
        {
            DateTime tempDate = _startDate.Value.AddMonths(1);
            return tempDate > DateTime.Now ? DateTime.Now.AddDays(1) : tempDate.AddDays(1);
        }
    }

    void SelectDateRange(DateTime? dt)
    {
        _endDate = dt;
        _chartX = BarChartDAC.GetChartX(_startDate.Value, _endDate.Value);
    }

    //Chart

    public List<ChartSeries> Series = new List<ChartSeries>() // ChartData
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 } }
    };
    public string[] _chartX;




    public void ElementClick(TableRowClickEventArgs<ProductTestData> e)
    {
        var i = e.Row;

        ProductTestData data = i.Item as ProductTestData;
        _selectedEl = data;
    }

    protected override void OnInitialized()
    {
        _startDate = DateTime.Now.AddDays(-7);
        _chartX = BarChartDAC.GetChartX(_startDate.Value, DateTime.Now);
        Elements.Add(new ProductTestData()
            {
                Code="a1",
                Name ="반짝이는 타일",
                Type="type01",
                Unit = "1Box * 100EA",
                nQty = 200,
                sQty =120
            });
        Elements.Add(new ProductTestData()
            {
                Code="a2",
                Name ="고급스러운 타일",
                Type="type02",
                Unit = "1Box * 100EA",
                nQty = 200,
                sQty =120
            });
          Elements.Add(new ProductTestData()
            {
                Code="a3",
                Name ="플라스틱 타일",
                Type="type02",
                Unit = "1Box * 100EA",
                nQty = 200,
                sQty =120
            });
          Elements.Add(new ProductTestData()
            {
                Code="a4",
                Name ="무난한 타일",
                Type="type03",
                Unit = "1Box * 100EA",
                nQty = 200,
                sQty =120
            });
        // Elements = await httpClient.GetFromJsonAsync<List<ProductTestData>>("webapi/periodictable");
    }

    private bool FilterFunc1(ProductTestData element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ProductTestData element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}