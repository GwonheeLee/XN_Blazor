@page "/product"
@using DataShared

@inject ItemService ItemService
@inject NavigationManager Nav
<br />
<AuthorizeView>
	<NotAuthorized>

		<MudItem Class="d-flex justify-center py-1 px-1 mt-10">
			<MudAlert Class="width pa-2 mx-2" Style="width:500px" AlertTextPosition="AlertTextPosition.Center" Severity="Severity.Error">권한이 없습니다</MudAlert>
		</MudItem>

		<MudItem Class="d-flex justify-center py-1 px-1 mt-3">
			<MudButton Class="pa-2 mx-2" Link="/hi" Variant="Variant.Filled" Color="Color.Secondary">Login</MudButton>
		</MudItem>

	</NotAuthorized>

	<Authorized>

		@if (Items == null)
		{
			<br />
			<MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7 mt-50 pt-30" />
		}
		else
		{
			<MudPaper Class="pa-2 ma-1" Outlined="true">
				<MudTable Items="@Items" T="@Item" OnRowClick="@ItemsClick" Hover=true Bordered=true Filter="new Func<Item,bool>(FilterFunc1)">
					<ToolBarContent>
						<MudText Typo="Typo.h6">제품목록</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-2"></MudTextField>
					</ToolBarContent>
					<HeaderContent>
						<MudTh>코드</MudTh>
						<MudTh>제품명</MudTh>
						<MudTh>타입</MudTh>
						<MudTh>단위</MudTh>
						<MudTh>시간당 생산량</MudTh>
						<MudTh>Cavity</MudTh>
					</HeaderContent>
					<RowTemplate Context="Item">
						<MudTd DataLabel="Item_Code">@Item.Item_Code</MudTd>
						<MudTd DataLabel="Item_Name">@Item.Item_Name</MudTd>
						<MudTd DataLabel="Item_Type">@Item.Item_Type</MudTd>
						<MudTd DataLabel="Item_Unit">@Item.Item_Unit</MudTd>
						<MudTd DataLabel="PrdQty_Per_Hour">@Item.PrdQty_Per_Hour</MudTd>
						<MudTd DataLabel="Cavity_qty">@Item.Cavity_qty</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
				</MudTable>
			</MudPaper>

			@if (ShowToggle)
			{
				<MudPaper Class="pa-2 ma-1" Square="true">
					<MudGrid>
						<MudItem xs="6" sm="6" md="6" lg="6">
							<MudDatePicker Label="Start Date" DateChanged="@SelectDateStart"
								   HelperText="Start Date" DateFormat="yyyy/MM/dd" MaxDate="@DateTime.Now" @ref="@StartPicker"/>
						</MudItem>

						<MudItem xs="6" sm="6" md="6" lg="6">
							<MudDatePicker Label="End Date" DateChanged="@SelectDateEnd"
								   HelperText="End Date" DateFormat="yyyy/MM/dd" MaxDate="@MaxDate" MinDate="@_startDate.Value.AddDays(1)" @ref="@EndPicker"/>
						</MudItem>
					</MudGrid>
				</MudPaper>
				@if (ShowChartToggle)
				{

					<MudPaper Class="pa-2 ma-2" Square="true" >
						<MudGrid>
							<MudItem xs="1" sm="1" md="1" lg="1"></MudItem>
							<MudItem Class="pl-12" xs="10" sm="10" md="4" lg="4">
								<MudChart ChartType="ChartType.Pie" InputData="@_pieChartData" InputLabels="@_labels" Width="100%" Height="500px" />
							</MudItem>
							<MudItem xs="1" sm="1" md="1" lg="1"></MudItem>

							<MudItem xs="12" sm="12" md="6" lg="6">
								<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@_chartX" Width="100%" Height="500px"></MudChart>
							</MudItem>
						</MudGrid>
					</MudPaper>
				}

				<MudScrollToTop>
					<MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
				</MudScrollToTop>
			}
		}
		<div style="height:800px"></div>
	</Authorized>
</AuthorizeView>


@code {
	//ProductList
	string searchString1 = "";
	//Item selectedItem1 = null;
	List<Item> Items;
	Item _selectedItem;
	MudDatePicker StartPicker { get; set; }
	MudDatePicker EndPicker{ get; set; }

	//ShowToggle
	bool ShowToggle { get { return _selectedItem != null; } set { ShowToggle = value; } }
	bool ShowChartToggle { get; set; }
	//Date
	DateTime? _startDate;
	DateTime? _endDate;
	DateTime MaxDate
	{
		get
		{
			DateTime tempDate = _startDate.Value.AddMonths(1);
			return tempDate > DateTime.Now ? DateTime.Now.AddDays(1) : tempDate.AddDays(1);
		}
	}
	void SelectDateStart(DateTime? dt)
	{
		_startDate = dt;
		StateHasChanged();
	}

	async void SelectDateEnd(DateTime? dt)
	{
		ShowChartToggle = true;
		_endDate = dt;
		_chartX = BarChartService.GetChartX(_startDate.Value, _endDate.Value);
		//Series[0].Data = BarChartService.GetSeriesData(_chartX.Length);

		await GetDefectData();
		await GetItemQty();
		StateHasChanged();
	}

	async Task GetDefectData() // 불량율
	{
		var defectParam = new Bad_Good()
			{
				Item_Code = _selectedItem.Item_Code,
				DateStart = _startDate.Value.ToString("yyyy-MM-dd"),
				DateEnd = _endDate.Value.ToString("yyyy-MM-dd")
			};
		Bad_Good result = await ItemService.GetDefect(defectParam);
		double[] tempDefuctData = { result.Good_Qty, result.Bad_Qty };
		_pieChartData = new double[] { result.Good_Qty, result.Bad_Qty };
		_labels[0] = $"상품 {result.Good_Qty.ToString()}";
		_labels[1] = $"하품 {result.Bad_Qty.ToString()}";
	}

	async Task GetItemQty()
	{
		var itemQtyParam = new ItemQty()
			{
				Start = _startDate.Value,
				End = _endDate.Value,
				Item_Code = _selectedItem.Item_Code
			};
		double[] result = await ItemService.GetItemQty(itemQtyParam);
		Series[0].Data = result;
	}
	//BarChart

	public List<ChartSeries> Series;
	public string[] _chartX;

	//PieChart
	string[] _labels;
	double[] _pieChartData;
	int _selectedIndex = -1;


	public void ItemsClick(TableRowClickEventArgs<Item> e)
	{
		var i = e.Row;

		Item data = i.Item as Item;
		_selectedItem = data;

		Series = new List<ChartSeries>() //Test Data
        {
				new ChartSeries() {Name = _selectedItem.Item_Name,Data=new double[7] }
		};
		ShowChartToggle = false;
		ResetDatePickers();
	}

	void ResetDatePickers()
	{
		_startDate = DateTime.Now;
		_endDate = null;
		StartPicker?.Reset();
		EndPicker?.Reset();
	}

	protected override async Task OnInitializedAsync()
	{
		_startDate = DateTime.Now;
		_chartX = BarChartService.GetChartX(_startDate.Value, DateTime.Now);
		_labels = new string[2];

		Items = await ItemService.GetItemsAsync();
	}

	private bool FilterFunc1(Item element) => FilterFunc(element, searchString1);

	private bool FilterFunc(Item element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.Item_Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}